#!/bin/bash

# Operator Uplift - Safe GitHub Deployment Script
# This script ensures no secrets are exposed when pushing to GitHub

echo "üöÄ Operator Uplift - Safe GitHub Deployment"
echo "=========================================="

# Check if git is initialized
if [ ! -d ".git" ]; then
    echo "‚ùå Git repository not initialized. Initializing..."
    git init
fi

# Check for any files that might contain secrets
echo "üîç Checking for potential secret files..."

# List of files that should NOT be committed
SECRET_FILES=(
    ".env"
    "firebase-config.js"
    "firebase-config.json"
    "api-keys.js"
    "secrets.js"
    "production-vapid-config.js"
)

for file in "${SECRET_FILES[@]}"; do
    if [ -f "$file" ]; then
        echo "‚ö†Ô∏è  WARNING: Found potential secret file: $file"
        echo "   This file should be in .gitignore and not committed!"
    fi
done

# Check if .gitignore exists and contains necessary entries
if [ ! -f ".gitignore" ]; then
    echo "‚ùå .gitignore not found. Creating..."
    cat > .gitignore << 'EOF'
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment variables and secrets
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.env.*.local

# Firebase
firebase-debug.log
.firebase/
firebase-config.js
firebase-config.json

# API Keys and Secrets
*-config.js
*secret*
*key*
*credential*
api-keys.js
secrets.js
vapid-config.js
production-vapid-config.js

# Build outputs
dist/
build/
.next/
out/

# IDE and Editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# Temporary folders
tmp/
temp/

# Netlify
.netlify/

# Testing
.nyc_output/

# Backup files
*.backup
*.bak
*~

# Local development
.local/
EOF
    echo "‚úÖ .gitignore created"
fi

# Add all files (except those in .gitignore)
echo "üìÅ Adding files to git..."
git add .

# Check what will be committed
echo "üìã Files to be committed:"
git status --porcelain

# Ask for confirmation
echo ""
read -p "ü§î Do you want to proceed with the commit? (y/N): " -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå Deployment cancelled"
    exit 1
fi

# Commit with a descriptive message
echo "üíæ Committing changes..."
git commit -m "üöÄ Deploy Operator Uplift - Production Ready

- ‚úÖ Enterprise-grade security implementation
- ‚úÖ WCAG 2.1 AAA accessibility compliance  
- ‚úÖ PWA features with offline support
- ‚úÖ AI integration with multiple providers
- ‚úÖ Comprehensive gamification system
- ‚úÖ Social features and community tools
- ‚úÖ Advanced analytics and insights
- ‚úÖ Mobile-responsive design
- ‚úÖ Performance optimized
- ‚úÖ Production-ready configuration

All secrets properly excluded via .gitignore"

# Check if remote exists
if ! git remote get-url origin > /dev/null 2>&1; then
    echo "‚ùå No remote origin found."
    echo "Please add your GitHub repository as origin:"
    echo "git remote add origin https://github.com/yourusername/operator-uplift.git"
    exit 1
fi

# Push to GitHub
echo "üöÄ Pushing to GitHub..."
git push origin main

if [ $? -eq 0 ]; then
    echo ""
    echo "üéâ SUCCESS! Operator Uplift deployed to GitHub!"
    echo ""
    echo "üìã Next Steps:"
    echo "1. Connect your GitHub repo to Netlify"
    echo "2. Set environment variables in Netlify dashboard:"
    echo "   - FIREBASE_API_KEY"
    echo "   - FIREBASE_AUTH_DOMAIN" 
    echo "   - FIREBASE_PROJECT_ID"
    echo "   - OPENAI_API_KEY"
    echo "   - ANTHROPIC_API_KEY"
    echo "   - GOOGLE_GEMINI_API_KEY"
    echo "   - VAPID_PUBLIC_KEY"
    echo "   - VAPID_PRIVATE_KEY"
    echo "3. Deploy and test your application"
    echo ""
    echo "üîí Security Note: All secrets are properly excluded!"
    echo "‚úÖ Your API keys and sensitive data are safe."
else
    echo "‚ùå Failed to push to GitHub. Please check your connection and try again."
    exit 1
fi 